# -*- coding: utf-8 -*-
"""SIP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_lDQPfsEiifgY15ZTCK5eagS5OPFWewA
"""

!pip install squarify

import numpy as np
import pandas as pd
import os
import missingno as miss

for dirname, _, filenames in os.walk('/content'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

FILEPATH = '/content/drive/MyDrive/Consumer_Complaints.csv'

df = pd.read_csv(FILEPATH)

df.info()

df.describe()

df.head()

df.isnull().sum()

df.isnull().sum().sum()

miss.matrix(df)

miss.heatmap(df)

miss.dendrogram(df)

miss.bar(df)

df.columns

len(df.columns)

df['Product'].unique()

len(df['Product'].unique())

import matplotlib.pyplot as plt

def show_donut_plot(dataframe, column):

    rating_data = dataframe.groupby(column)[['Complaint ID']].count()
    rating_data = rating_data.head(10)

    plt.figure(figsize=(12, 8))
    plt.pie(rating_data[['Complaint ID']].iloc[:, 0], autopct='%1.0f%%', startangle=140, pctdistance=1.1, shadow=True)

    gap = plt.Circle((0, 0), 0.5, fc='white')
    fig = plt.gcf()
    fig.gca().add_artist(gap)

    plt.axis('equal')

    legend_labels = []
    for index, row in rating_data.iterrows():
        legend_labels.append(index)
    plt.legend(legend_labels)

    plt.title('Donut Plot by ' + str(column), loc='center')

    plt.show()

show_donut_plot(df,'Product')

show_donut_plot(df,'Submitted via')

show_donut_plot(df,'State')

import squarify

def show_treemap(col):
    df_type_series = df.groupby(col)['Complaint ID'].count().sort_values(ascending = False).head(20)

    type_sizes = []
    type_labels = []
    for i, v in df_type_series.items():
        type_sizes.append(v)

        type_labels.append(str(i) + ' ('+str(v)+')')

    if len(type_labels) < len(type_sizes):
        type_labels.extend([''] * (len(type_sizes) - len(type_labels)))
    elif len(type_labels) > len(type_sizes):
        type_labels = type_labels[:len(type_sizes)]

    fig, ax = plt.subplots(1, figsize = (12,12))
    squarify.plot(sizes=type_sizes,
                  label=type_labels,
                  alpha=.2 )
    plt.title('TreeMap by '+ str(col))
    plt.axis('off')
    plt.show()

df_type_series = df.groupby('State')['Complaint ID'].count().sort_values(ascending = False).head(10)

show_treemap('Product')

show_treemap('State')

show_treemap('Sub-issue')

show_treemap('Tags')

import pandas as pd
import matplotlib.pyplot as plt

def show_pie_plot(col):

    rating_data = df.groupby(col)[['Complaint ID']].count().values.flatten()

    rating_data = pd.DataFrame(rating_data, columns=['Count'])

    plt.figure(figsize=(12, 8))
    plt.pie(rating_data['Count'], autopct='%1.0f%%', startangle=140, pctdistance=1.1, shadow=True)
    plt.axis('equal')

    cols = []
    for index, row in rating_data.iterrows():
        cols.append(index)

    plt.legend(cols)

    plt.title('Pie Plot by ' + str(col), loc='center')

    plt.show()

show_pie_plot('Timely response?')

show_pie_plot('Consumer disputed?')

import seaborn as sns

print(df['Timely response?'].value_counts())

ax = sns.barplot(
    x = df['Timely response?'].value_counts().keys(),
    y = df['Timely response?'].value_counts().values
)
ax.set_xticklabels(ax.get_xticklabels(), rotation = 90)
plt.show()

def show_donut_plot_by_state(col, state):

    state_df = df[df['State'] == state]

    rating_data = state_df.groupby(col)[['Complaint ID']].count().head(10)

    complaint_counts = rating_data['Complaint ID'].values

    plt.figure(figsize=(12, 8))
    plt.pie(complaint_counts, autopct='%1.0f%%', startangle=140, pctdistance=1.1, shadow=True)

    gap = plt.Circle((0, 0), 0.5, fc='white')
    fig = plt.gcf()
    fig.gca().add_artist(gap)

    plt.axis('equal')

    cols = rating_data.index.tolist()

    plt.legend(cols)

    plt.title('Donut Plot by ' + str(col) + ' in ' + str(state), loc='center')

    plt.show()

show_donut_plot_by_state('Product', 'CA')

show_donut_plot_by_state('Product', 'VA')

show_donut_plot_by_state('Consumer disputed?', 'VA')

show_donut_plot_by_state('Consumer disputed?', 'CA')

df['date_received'] = pd.to_datetime(df['Date received'])
df['month_received'] = df['date_received'].dt.month
df['year_received'] = df['date_received'].dt.year

show_donut_plot('month_received', 'CA')

show_donut_plot('year_received','CA')

df_dispute = df[df['Consumer disputed?'] == 'Yes']

ax = sns.barplot(
    x = df_dispute['Company'].value_counts().head(10).keys(),
    y = df_dispute['Company'].value_counts().head(10).values
)
ax.set_xticklabels(ax.get_xticklabels(), rotation = 90)

plt.title('Consumer Disputed with companies')
plt.show()

def show_donut_plot_by_company(company, column):

    company_df = df_dispute[df_dispute['Company'] == company]

    rating_data = company_df.groupby(column)[['Complaint ID']].count().head(10)
    plt.figure(figsize=(12, 8))
    plt.pie(rating_data[['Complaint ID']].values.ravel(), autopct='%1.0f%%', startangle=140, pctdistance=1.1, shadow=True)

    gap = plt.Circle((0, 0), 0.5, fc='white')
    fig = plt.gcf()
    fig.gca().add_artist(gap)

    plt.axis('equal')

    categories = []
    for index, row in rating_data.iterrows():
        categories.append(index)
    plt.legend(categories)

    plt.title('Donut Plot - ' + str(company))

show_donut_plot_by_company('Bank of America', 'State')

show_donut_plot_by_company('Equifax', 'State')

show_donut_plot_by_company('Citibank', 'State')

import json

with open("/content/drive/MyDrive/States.json", "r") as file:
    states_data = file.read()

states_json = json.loads(states_data)

state_list = states_json['states']

def get_lat(code):

    for state_dict in state_list:

        if(state_dict['code'] == code):
            return state_dict['latitude']

    return None

def get_long(code):

    for state_dict in state_list:

        if(state_dict['code'] == code):
            return state_dict['longitude']

    return None

df['latitude'] = df['State'].apply(get_lat)
df['longitude'] = df['State'].apply(get_long)

df.dropna(subset = ["latitude", "longitude"], inplace=True)

import folium
from folium import plugins

usa_map = folium.Map([39.358, -98.118], zoom_start=4)
map_title = 'Heatmap for Consumer Complaint for US'
title_html = '''
             <h3 align="center"><b>{}</b></h3>
             '''.format(map_title)
usa_map.get_root().html.add_child(folium.Element(title_html))
usa_map.add_child(plugins.HeatMap(df[['latitude', 'longitude']]))
usa_map

state_series = df.groupby('State')['Complaint ID'].count()
state_df = pd.DataFrame({'code':state_series.index, 'count':state_series.values})

import plotly.graph_objects as go

fig = go.Figure(data=go.Choropleth(
    locations = state_df['code'],
    z = state_df['count'].astype(float),
    locationmode = 'USA-states',
    colorscale = 'Greens',
    colorbar_title = "Count Bar",
))

fig.update_layout(
    title_text = 'Consumer Complaints by State',
    geo_scope='usa',
)

fig.show()